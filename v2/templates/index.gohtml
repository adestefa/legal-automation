<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal Document Automation - Mallon Law</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/htmx.org@1.9.6"></script>
    <link rel="stylesheet" href="/static/site.css">
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Header -->
        <header class="mb-8">
            <div class="flex justify-between items-center">
                <h1 class="text-3xl font-bold text-gray-800">Legal Document Automation <span class="text-sm font-normal text-gray-500">v2.8.0</span></h1>
                <div class="flex items-center space-x-4">
                    <!-- iCloud Status -->
                    <div class="flex items-center space-x-2">
                        <div class="h-2 w-2 rounded-full {{if true}}bg-green-500{{else}}bg-gray-400{{end}}"></div>
                        <span class="text-sm {{if true}}text-green-600{{else}}text-gray-500{{end}}">
                            iCloud: {{if true}}Connected{{else}}Not Connected{{end}}
                        </span>
                        <button hx-get="/ui/icloud-setup" 
                                hx-target="#modal-container"
                                hx-swap="innerHTML"
                                class="text-xs px-2 py-1 rounded {{if true}}bg-blue-100 text-blue-600 hover:bg-blue-200{{else}}bg-gray-100 text-gray-600 hover:bg-gray-200{{end}}">
                            {{if true}}Manage{{else}}Setup{{end}}
                        </button>
                    </div>
                    <!-- User & Logout -->
                    <div class="flex items-center space-x-4">
                        <div class="text-sm text-gray-600">
                            <span class="font-medium">{{.Username}}</span>
                            <div class="text-xs text-gray-500">Mallon Consumer Law Group</div>
                        </div>
                        <button hx-post="/api/logout" 
                                hx-swap="none"
                                hx-on:htmx:after-request="window.location.href = '/login'"
                                class="text-xs px-3 py-1 bg-red-100 text-red-600 hover:bg-red-200 rounded transition duration-200">
                            Logout
                        </button>
                    </div>
                </div>
            </div>
            <div class="h-1 w-full bg-blue-600 mt-2"></div>
        </header>

        <!-- Progress Steps -->
        {{template "_progress_steps.gohtml" .}}

        <!-- Step Content Container -->
        <div id="step-content">
            {{if eq .CurrentStep 0}}
                {{template "_step0_case_setup.gohtml" .}}
            {{else if eq .CurrentStep 1}}
                {{template "_step1_document_selection.gohtml" .}}
            {{else if eq .CurrentStep 2}}
                {{template "_step2_template_selection.gohtml" .}}
            {{else if eq .CurrentStep 3}}
                {{template "_step3_review_data.gohtml" .}}
            {{else if eq .CurrentStep 4}}
                {{template "_step4_generate_document.gohtml" .}}
            {{else if eq .CurrentStep 5}}
                {{template "_step5_icloud_sync.gohtml" .}}
            {{end}}
        </div>

        <!-- Modal Container for HTMX-loaded modals -->
        <div id="modal-container"></div>
    </div>

    <!-- HTMX Global Event Handlers -->
    <script>
        // Configure HTMX to include session credentials
        htmx.config.withCredentials = true;
        htmx.config.includeIndicatorStyles = false;
        
        // Global HTMX event listeners
        document.body.addEventListener('htmx:beforeRequest', function(evt) {
            console.log('=== HTMX BEFORE REQUEST ===');
            console.log('Request path:', evt.detail.pathInfo.requestPath);
            console.log('Target element:', evt.detail.target.id);
            console.log('=== END BEFORE REQUEST ===');
            
            // Ensure session cookies are included
            const xhr = evt.detail.xhr;
            xhr.withCredentials = true;
            
            // Add session validation headers
            const sessionToken = getCookie('session_token');
            if (sessionToken) {
                xhr.setRequestHeader('X-Session-Token', sessionToken);
            }
            
            // Show loading indicators if needed
            showLoadingIndicator(evt.detail.target);
        });

        document.body.addEventListener('htmx:beforeSwap', function(evt) {
            console.log('=== HTMX BEFORE SWAP DEBUG ===');
            console.log('Server response length:', evt.detail.serverResponse.length);
            console.log('Server response preview:', evt.detail.serverResponse.substring(0, 300));
            console.log('Response status:', evt.detail.xhr.status);
            console.log('Response content-type:', evt.detail.xhr.getResponseHeader('content-type'));
            console.log('Target before swap:', evt.detail.target.id);
            console.log('Target innerHTML before swap length:', evt.detail.target.innerHTML.length);
            console.log('=== END BEFORE SWAP DEBUG ===');
        });

        document.body.addEventListener('htmx:afterSwap', function(evt) {
            const target = evt.detail.target;
            console.log('=== HTMX AFTER SWAP DEBUG ===');
            console.log('Target ID:', target.id);
            console.log('Target tagName:', target.tagName);
            console.log('Target innerHTML length:', target.innerHTML.length);
            console.log('Target innerHTML preview:', target.innerHTML.substring(0, 200));
            console.log('Target visible children count:', target.children.length);
            console.log('Target clientHeight:', target.clientHeight);
            console.log('Target clientWidth:', target.clientWidth);
            console.log('Target style.display:', window.getComputedStyle(target).display);
            console.log('Target style.visibility:', window.getComputedStyle(target).visibility);
            console.log('Target style.height:', window.getComputedStyle(target).height);
            
            // Check if content exists but is hidden
            if (target.children.length > 0) {
                console.log('First child:', target.children[0]);
                console.log('First child display:', window.getComputedStyle(target.children[0]).display);
                console.log('First child visibility:', window.getComputedStyle(target.children[0]).visibility);
            }
            
            console.log('=== END HTMX DEBUG ===');
            
            // Check again after a delay to see if content appears later
            setTimeout(function() {
                console.log('=== DELAYED CHECK (500ms) ===');
                console.log('Target innerHTML length after delay:', target.innerHTML.length);
                console.log('Target clientHeight after delay:', target.clientHeight);
                console.log('Target visible after delay:', target.offsetParent !== null);
                console.log('=== END DELAYED CHECK ===');
            }, 500);
            
            hideLoadingIndicator(evt.detail.target);
        });

        document.body.addEventListener('htmx:responseError', function(evt) {
            console.error('HTMX Error:', evt.detail.error, evt.detail.xhr.status);
            hideLoadingIndicator(evt.detail.target);
            
            // Handle session expiration
            if (evt.detail.xhr.status === 401) {
                console.warn('Session expired, redirecting to login');
                window.location.href = '/login';
                return;
            }
            
            // Display user-friendly error message
            let errorMsg = "An error occurred. Please try again.";
            if (evt.detail.xhr.status === 500) {
                errorMsg = "Server error. Please try again later.";
            } else if (evt.detail.xhr.status === 404) {
                errorMsg = "Resource not found. Please refresh the page.";
            }
            
            showErrorMessage(errorMsg);
        });

        document.body.addEventListener('htmx:timeout', function(evt) {
            console.error('HTMX Timeout for request:', evt.detail.pathInfo.requestPath);
            hideLoadingIndicator(evt.detail.target);
            showErrorMessage("Request timed out. Please try again.");
        });

        // Utility functions
        function getCookie(name) {
            const value = "; " + document.cookie;
            const parts = value.split("; " + name + "=");
            if (parts.length === 2) return parts.pop().split(";").shift();
        }

        function showLoadingIndicator(target) {
            if (target && !target.querySelector('.htmx-loading')) {
                const loader = document.createElement('div');
                loader.className = 'htmx-loading absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center';
                loader.innerHTML = '<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>';
                if (target.style.position !== 'relative' && target.style.position !== 'absolute') {
                    target.style.position = 'relative';
                }
                target.appendChild(loader);
            }
        }

        function hideLoadingIndicator(target) {
            if (target) {
                const loader = target.querySelector('.htmx-loading');
                if (loader) {
                    loader.remove();
                }
            }
        }

        function showErrorMessage(message) {
            // Create or update error toast
            let toast = document.getElementById('error-toast');
            if (!toast) {
                toast = document.createElement('div');
                toast.id = 'error-toast';
                toast.className = 'fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50 max-w-md';
                document.body.appendChild(toast);
            }
            toast.innerHTML = `
                <div class="flex items-center">
                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                    </svg>
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-red-600 hover:text-red-800">✕</button>
                </div>
            `;
            // Auto-hide after 5 seconds
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 5000);
        }

        console.log('Mallon Legal Assistant v2.5.32 loaded with enhanced session management');
    </script>
</body>
</html>